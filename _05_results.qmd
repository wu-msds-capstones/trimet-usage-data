```{r echo=FALSE, include=F} 
library(tidyverse)
library(cowplot)
```
```{r, echo=F, include=F}
stats_full = read_csv('data/stats_full.csv')
stats_max = read_csv('data/stats_max.csv')
stats_nomax = read_csv('data/stats_nomax.csv')
```

```{r, echo=F, include=F}
rf_data = read_csv('data/rf data.csv')
```

```{r, echo=F, message=F}
stop_features = read_csv('data/stop_features.csv')

stop_features_plot = stop_features %>% mutate(
  stop_type = ifelse(stop_type == 'MAX Station', "MAX Station", 'Bus & WES Stations'), 
  day = as.factor(day)
  )
```

# Results

## Ethics in Action 

@fig-arrival-boxplot, below, shows the boxplot of minutes between arrival times created to investigate the range of times that could be spent waiting at a transit station. 

```{r, echo=F, warning=F}
#| label: fig-arrival-boxplot
#| fig-cap: 'Boxplots showing the average number of minutes between arrivals at a station, faceted by station type. WES commuter rail stations are combined with bus data, since there are only 6 WES stations in the TriMet system. Data from both weekdays and weekend days is included. Outliers higher than 100 are excluded for a better view of the non-outlier data.'
ggplot(data=stop_features_plot, aes(x=arrival_diff, fill=stop_type)) + 
  geom_boxplot() +
  xlim(0, 100) + 
  theme_bw()+ 
  labs(
    title='Average Difference between Arrival Times, by Station Type', 
    legend.title='Station Type', 
    x='Number of Minutes between Arrivals', 
    caption='Data from TriMet', 
    fill='Station Type'
  ) + 
  theme(
    axis.text.y = element_blank(), 
    axis.ticks.y = element_blank()
  ) +
  scale_fill_manual(values=c('cornflowerblue', 'orange', 'blue3'))
```

20 minutes is often considered a reasonable maximum time to wait at a transit stop between arrivals. However, it can be seen in @fig-arrival-boxplot that only the MAX lines run every 15-20 minutes regularly, and that only half of the buses by quartile are 25 minutes or less. The third quartile of the bus and WES commuter rail stations goes up over 60 minutes. More than an hour is a long time to wait at a transit stop. 
This illustrates just one of many ethical considerations that must be taken into account when designing a transit systemâ€“or even simply running one, as TriMet is doing. It also goes some way in explaining why many TriMet stations see as little usage as they do. 

## Statistical Modeling 

The overall performance of our Quasi-Poisson model can seen below, in @fig-stats-full, where the actual usages of stations are plotted against the model's predicted usage.

```{r, echo=F}
#| label: fig-stats-full
#| fig-cap: 'Quasi-Poisson model performance on the entirety of our feature dataset.'
stats_full_plot = ggplot(stats_full) + 
  geom_point(aes(x=usage, y=pred, alpha=0.5)) + 
  geom_line(aes(x=usage, y=usage), colour='blue') + 
  #xlab('real')+ 
  #ylab('predicted') + 
  theme_bw() + 
  labs(
    title = 'Predicted vs Actual Usages',
    x = 'Actual Usage', 
    y = 'Predicted Usage', 
    caption = 'Data from TriMet'
  ) + 
  theme(
    legend.position='none'
  )

stats_full_plot
```

One insight we gained from this model was from the interaction between the number of routes and whether the station was a MAX line. We found, with a p-value of 0.003, that we can expect the number of routes to be on average 15% less for MAX lines. 

As you can see in @fig-stats-max, the model using only MAX lines performed somewhat poorly. The MAX lines have higher and more variant usage values, as well a lower number of data points (360 compared to the other partition's 9,043). Unfortunately, we we aren't able to make any statistically significant inferences from the coefficients of this model due to large p-values.

```{r, echo=F}
#| label: fig-stats-max
#| fig-cap: 'Quasi-Poisson model performance on MAX lines only.'
stats_max_plot = ggplot(stats_max) + 
  geom_point(aes(x=usage, y=pred, alpha=0.5)) + 
  geom_line(aes(x=usage, y=usage), colour='blue') + 
  #xlab('real')+ 
  #ylab('predicted') + 
  theme_bw() + 
  labs(
    title = 'MAX Line Quasi-Poisson Predicted vs Actual Usages',
    x = 'Actual Usage', 
    y = 'Predicted Usage', 
    caption = 'Data from TriMet'
  ) + 
  theme(
    legend.position='none'
  )

stats_max_plot
```

Next, the model without any MAX lines shows promise (pictured below in @fig-stats-nomax). With a larger number of data points, each of the coefficients of the model were found to be statistically significant. According to the model, we should expect the usage of a station to increase by 20.2% with each additional route that visits the station. Each station should also expect around 17% less usage on the weekends. Finally, with each additional minute added to the average difference between arrivals to a station, we should expect the usage to drop by 5%.

```{r, echo=F}
#| label: fig-stats-nomax
#| fig-cap: 'Quasi-Poisson model performance, excluding MAX lines.'
stats_nomax_plot = ggplot(stats_nomax) + 
  geom_point(aes(x=usage, y=pred, alpha=0.5)) + 
  geom_line(aes(x=usage, y=usage), colour='blue') + 
  #xlab('real')+ 
  #ylab('predicted') + 
  theme_bw() + 
  labs(
    title = 'Non-MAX Station Quasi-Poisson Predicted vs Actual Usages',
    x = 'Actual Usage', 
    y = 'Predicted Usage', 
    caption = 'Data from TriMet'
  ) + 
  theme(
    legend.position='none'
  )

stats_nomax_plot
```

Each of these models seems to struggle with placing certain stations, predicting the usage to be much lower than the actual usage. These outliers are typically stations with a low number of routes, but a high usage nevertheless. A large number of these are MAX lines, but there are still many large outliers, even in the partition excluding MAX lines. This is most likely caused by an overreliance of our models on the number of routes feature. In the future, our models could be improved by including more explanatory features.

## Machine Learning 

The results of the final random forest model constructed for this project are shown in @fig-ml. This model had a test RMSE of 0.685 and an $R^2$ value of 0.523, which is middle-of-the-road for regression accuracy. 

```{r, echo=F}
#| label: fig-ml
#| fig-cap: 'Predicted vs test log-usage values for the best model constructed over the course of this project. This model had an RMSE value of 0.689 and an $R^2$ value for 0.521. It has a tendency to over-predict at low log-usage values where the data is concentrated, and slightly under-predict at higher log-usage values. The vertical lines show where many usage values were transformed into a single log-usage value.'
rf_plot = ggplot(rf_data) + 
  geom_point(aes(x=log_usage, y=rf_pred, alpha=0.5)) + 
  geom_line(aes(x=log_usage, y=log_usage), colour='blue') + 
  #xlab('real')+ 
  #ylab('predicted') + 
  theme_bw() + 
  labs(
    title = 'Random Forest Predicted vs Test Usages',
    x = 'Log-transformed Test Usage', 
    y = 'Predicted Log-transformed Usage', 
    caption = 'Data from TriMet'
  ) + 
  theme(
    legend.position='none'
  )

rf_plot
```

As can be seen distinctly in the residuals of this model (shown in @fig-ml-resid) the random forest has a tendency to over-predict at low log-usage values, where much of the data is concentrated, and under-predict at high log-usage values--though it evens out at very high log-usage values, between 2 and 3. This is likely a result of the log-transform assigning many usage values to a single log-usage value. The vertical lines seen between -2 and 0 are good evidence of this: the model is trying to predict a range of values, but the transform means they're all a single value. 

```{r, echo=F}
#| label: fig-ml-resid
#| fig-cap: 'Residuals of the best regression model constructed over the course of this project. This model had an RMSE value of 0.689 and an $R^2$ value for 0.521. It has a tendency to over-predict at low log-usage values where the data is concentrated, and slightly under-predict at higher log-usage values. This is demostrated by the definite shape of the residuals. The vertical lines show where many usage values were transformed into a single log-usage value.'
rf_resid = ggplot(rf_data) + 
  geom_point(aes(x=log_usage, y = log_usage - rf_pred), alpha=0.5) + 
  geom_hline(aes(yintercept = 0), color='blue') + 
  theme_bw() + 
  labs(
    title = 'Residuals of Random Forest Regression', 
    x = 'Log-transformed Test Usage', 
    y = 'Residual (predicted - test)', 
    caption = 'Data from TriMet'
  ) 

rf_resid
```

```{r, echo=F}
plot_grid(rf_plot, rf_resid ,nrow=1) +
  facet_grid() +
  theme_minimal()
```

Overall, this model is relatively good at finding a ballpark value, but we would prefer to obtain more predictive data before applying it to any particularly meaningful analysis. 
